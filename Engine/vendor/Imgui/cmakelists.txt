# ImGui/CMakeLists.txt

cmake_minimum_required(VERSION 3.16)
project(ImGui LANGUAGES CXX)

add_library(ImGui STATIC)


# Output directories for binaries and object files
set_target_properties(ImGui PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/ImGui"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/ImGui"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/ImGui"
    OUTPUT_NAME "ImGui"
)

target_link_directories(ImGui INTERFACE "${CMAKE_CURRENT_BINARY_DIR}/ImGui/${CMAKE_BUILD_TYPE}")

file(GLOB_RECURSE ALL_FILES 
    "*.cpp"
    "*.h"
)

# Add the filtered files to your target
target_sources(ImGui PRIVATE ${ALL_FILES})


# Include directories
target_include_directories(ImGui PRIVATE
    "${CMAKE_SOURCE_DIR}/Engine/vendor/GLFW/include"
    "${CMAKE_SOURCE_DIR}/Engine/vendor/Glad/include"
    "${CMAKE_SOURCE_DIR}/Engine/vendor/ImGui"
)

# Link GLFW and Glad
target_link_libraries(ImGui PRIVATE
    GLFW
    Glad
)

# Platform-specific settings
if(WIN32)
    set(CMAKE_SYSTEM_VERSION "latest")
elseif(UNIX AND NOT APPLE) # Linux
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
    set(CMAKE_SYSTEM_VERSION "latest")
endif()

# Build configuration settings
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(ImGui PRIVATE IMGUI_DEBUG)
endif()

find_package(Vulkan REQUIRED)
if(NOT Vulkan_FOUND)
message(FATAL_ERROR "Vulkan not found")
endif()
target_include_directories(ImGui PUBLIC ${Vulkan_INCLUDE_DIR})
target_link_libraries(ImGui PUBLIC ${Vulkan_LIBRARIES})
